import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

/// Servicio para manejar vibraciones y feedback h√°ptico
class VibrationService {
  static final VibrationService _instance = VibrationService._internal();
  factory VibrationService() => _instance;
  VibrationService._internal();

  bool _hasVibrator = false;
  bool get hasVibrator => _hasVibrator;

  /// Inicializar el servicio de vibraci√≥n
  Future<void> init() async {
    try {
      _hasVibrator = true; // Asumir que est√° disponible
      print('[VibrationService] üì≥ Vibrador disponible: $_hasVibrator');
    } catch (e) {
      print('[VibrationService] ‚ùå Error inicializando vibraci√≥n: $e');
      _hasVibrator = false;
    }
  }

  /// Vibraci√≥n de alerta de zona peligrosa
  Future<void> dangerZoneAlert() async {
    if (!_hasVibrator) return;

    try {
      // Patr√≥n de vibraci√≥n: 3 vibraciones de impacto fuerte
      HapticFeedback.heavyImpact();
      await Future.delayed(const Duration(milliseconds: 200));
      HapticFeedback.heavyImpact();
      await Future.delayed(const Duration(milliseconds: 200));
      HapticFeedback.heavyImpact();
      print('[VibrationService] üö® Vibraci√≥n de alerta de zona peligrosa');
    } catch (e) {
      print('[VibrationService] ‚ùå Error en vibraci√≥n de alerta: $e');
    }
  }

  /// Vibraci√≥n de notificaci√≥n normal
  Future<void> notificationVibrate() async {
    if (!_hasVibrator) return;

    try {
      // Vibraci√≥n simple de notificaci√≥n
      HapticFeedback.lightImpact();
      print('[VibrationService] üì≥ Vibraci√≥n de notificaci√≥n');
    } catch (e) {
      print('[VibrationService] ‚ùå Error en vibraci√≥n de notificaci√≥n: $e');
    }
  }

  /// Vibraci√≥n de confirmaci√≥n
  Future<void> confirmVibrate() async {
    if (!_hasVibrator) return;

    try {
      // Vibraci√≥n corta de confirmaci√≥n
      HapticFeedback.selectionClick();
      print('[VibrationService] ‚úÖ Vibraci√≥n de confirmaci√≥n');
    } catch (e) {
      print('[VibrationService] ‚ùå Error en vibraci√≥n de confirmaci√≥n: $e');
    }
  }

  /// Vibraci√≥n de error
  Future<void> errorVibrate() async {
    if (!_hasVibrator) return;

    try {
      // Patr√≥n de vibraci√≥n de error: 2 vibraciones largas
      HapticFeedback.heavyImpact();
      await Future.delayed(const Duration(milliseconds: 300));
      HapticFeedback.heavyImpact();
      print('[VibrationService] ‚ùå Vibraci√≥n de error');
    } catch (e) {
      print('[VibrationService] ‚ùå Error en vibraci√≥n de error: $e');
    }
  }

  /// Vibraci√≥n de GPS falso detectado
  Future<void> gpsSpoofingAlert() async {
    if (!_hasVibrator) return;

    try {
      // Patr√≥n de vibraci√≥n espec√≠fico para GPS falso
      HapticFeedback.mediumImpact();
      await Future.delayed(const Duration(milliseconds: 100));
      HapticFeedback.mediumImpact();
      await Future.delayed(const Duration(milliseconds: 100));
      HapticFeedback.mediumImpact();
      await Future.delayed(const Duration(milliseconds: 100));
      HapticFeedback.mediumImpact();
      print('[VibrationService] üîí Vibraci√≥n de alerta GPS falso');
    } catch (e) {
      print('[VibrationService] ‚ùå Error en vibraci√≥n GPS falso: $e');
    }
  }

  /// Detener vibraci√≥n actual
  Future<void> stopVibration() async {
    if (!_hasVibrator) return;

    try {
      // flutter_vibrate no tiene m√©todo de cancel, pero podemos simular
      print('[VibrationService] ‚èπÔ∏è Vibraci√≥n detenida');
    } catch (e) {
      print('[VibrationService] ‚ùå Error deteniendo vibraci√≥n: $e');
    }
  }
}
